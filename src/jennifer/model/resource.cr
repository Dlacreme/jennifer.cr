require "./scoping"
require "./translation"
require "./relation_definition"
require "../macros"

module Jennifer
  module Model
    # Base abstract class for a database entity.
    abstract class Resource
      module AbstractClassMethods
        # Returns resource's table name.
        abstract def table_name
        abstract def build(values, new_record : Bool)
        abstract def build

        # Returns relation instance by given name.
        abstract def relation(name)

        # Returns table column counts grepped from the database.
        abstract def actual_table_field_count

        # Returns primary field name.
        abstract def primary_field_name

        # Returns `Jennifer::QueryBuilder::ModelQuery(T)`.
        #
        # This method is an entry point for writing query to your resource.
        #
        # ```
        # Address.all
        #   .where { _street.like("%St. Paul%") }
        #   .union(
        #     Profile.all
        #       .where { _login.in(["login1", "login2"]) }
        #       .select(:contact_id)
        #   )
        #   .select(:contact_id)
        #   .results
        # ```
        abstract def all

        # Returns superclass for the current class.
        #
        # ```
        # class A < Jennifer::Model::Base
        #   # ...
        # end
        #
        # class B < A
        # end
        #
        # B.superclass # => A
        # ```
        abstract def superclass

        # Returns criterion for the resource primary field.
        #
        # Is generated by `.mapping` macro.
        #
        # ```
        # User.primary.inspect # => #<Jennifer::QueryBuilder::Criteria:0x0 @field="id", @table="users">
        # ```
        abstract def primary

        # Returns field count.
        #
        # Is generated by `.mapping` macro.
        abstract def field_count

        # Returns array of field names
        #
        # Is generated by `.mapping` macro.
        abstract def field_names

        # Returns named tuple of column metadata
        #
        # Is generated by `.mapping` macro.
        abstract def columns_tuple

        # Accepts symbol hash or named tuple, stringifies it and calls constructor with string-based keys hash.
        #
        # It calls `after_initialize` callbacks.
        #
        # ```
        # User.new({ :name => "John Smith" })
        # User.new({ name: "John Smith" })
        # ```
        abstract def new(values : Hash(Symbol, ::Jennifer::DBAny) | NamedTuple)

        # Creates object based on given string hash.
        #
        # It calls `after_initialize` callbacks.
        #
        # ```
        # User.new({ "name" => "John Smith" })
        # ```
        abstract def new(values : Hash(String, ::Jennifer::DBAny))
      end

      extend AbstractClassMethods
      include Translation
      include Scoping
      include RelationDefinition
      include Macros

      # :nodoc:
      def self.superclass; end

      @@expression_builder : QueryBuilder::ExpressionBuilder?

      def inspect(io) : Nil
        io << "#<" << {{@type.name.id.stringify}} << ":0x"
        object_id.to_s(16, io)
        inspect_attributes(io)
        io << '>'
        nil
      end

      private def inspect_attributes(io) : Nil
        nil
      end

      def self.build(values : Hash(Symbol, ::Jennifer::DBAny) | NamedTuple)
        new(values)
      end

      def self.build(values : Hash(String, ::Jennifer::DBAny))
        new(values)
      end

      def self.build(**values)
        new(values)
      end

      # Returns adapter instance.
      def self.adapter
        Adapter.adapter
      end

      def self.context
        @@expression_builder ||= QueryBuilder::ExpressionBuilder.new(table_name)
      end

      # Implementation of `AbstractClassMethods.all`.
      def self.all
        {% begin %}
          QueryBuilder::ModelQuery({{@type}}).build(table_name)
        {% end %}
      end

      # Is a shortcut for `.all.where` call.
      def self.where(&block)
        all.where { |builder| with builder yield }
      end

      # Starts database transaction.
      def self.transaction
        adapter.transaction do |t|
          yield(t)
        end
      end

      def self.c(name : String | Symbol)
        context.c(name.to_s)
      end

      def self.c(name : String | Symbol, relation)
        ::Jennifer::QueryBuilder::Criteria.new(name.to_s, table_name, relation)
      end

      def self.star
        context.star
      end

      def self.relation(name)
        raise Jennifer::UnknownRelation.new(self, name)
      end

      def append_relation(name : String, hash)
        raise Jennifer::UnknownRelation.new(self.class, name)
      end

      def set_inverse_of(name : String, object)
        raise Jennifer::UnknownRelation.new(self.class, name)
      end

      def get_relation(name : String)
        raise Jennifer::UnknownRelation.new(self.class, name)
      end

      # Returns value of attribute *name*
      #
      # Is generated by `.mapping` macro.
      abstract def attribute(name)

      # Returns value of primary field
      #
      # Is generated by `.mapping` macro.
      abstract def primary

      # Returns hash with model attributes; keys are symbols.
      #
      # Is generated by `.mapping` macro.
      abstract def to_h

      # Returns hash with model attributes; keys are strings.
      #
      # Is generated by `.mapping` macro.
      abstract def to_str_h
    end
  end
end